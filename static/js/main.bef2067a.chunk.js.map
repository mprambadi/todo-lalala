{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","state","nama","fullName","shortName","todos","todo","page","edit","handleChange","e","_this","setState","Object","_home_aspire_Documents_refactory_vox_demo_demo_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__","target","name","value","handlePagination","handleInput","key","_home_aspire_Documents_refactory_vox_demo_demo_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","concat","id","Date","now","status","handleEdit","item","console","log","map","_home_aspire_Documents_refactory_vox_demo_demo_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_this2","this","react__WEBPACK_IMPORTED_MODULE_8___default","className","onChange","onKeyPress","onDoubleClick","autoFocus","onBlur","Component","hot","module"],"mappings":"kQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kJE7HbR,0NACJS,MAAQ,CACNC,KAAM,GACNC,SAAU,GACVC,UAAW,GACXC,MAAO,GACPC,KAAM,GACNC,KAAM,EACNC,KAAM,MAGRC,aAAe,SAAAC,GACbC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBH,EAAEK,OAAOC,KAAON,EAAEK,OAAOE,WAG5CC,iBAAmB,WACjBP,EAAKC,SAAS,SAAAX,GAAK,MAAK,CACtBM,KAAMN,EAAMM,KAAO,QAIvBY,YAAc,SAAAT,GACR,UAAAA,EAAEU,KAAmBT,EAAKV,MAAMK,MAClCK,EAAKC,SAAS,SAAAX,GACZ,MAAO,CACLI,MAAMQ,OAAAQ,EAAA,EAAAR,CACDZ,EAAMI,OADNiB,OAAA,CAEH,CAAEC,GAAIC,KAAKC,MAAOT,KAAMf,EAAMK,KAAMoB,QAAQ,EAAOlB,MAAM,KAE3DF,KAAM,SAMdqB,WAAa,SAAAC,GACTC,QAAQC,IAAIF,GACdjB,EAAKC,SAAS,SAAAX,GAAK,MAAK,CACtBI,MAAOJ,EAAMI,MAAM0B,IAAI,SAAAzB,GAAI,OACzBA,EAAKiB,KAAOK,EAAKL,GAAjBV,OAAAmB,EAAA,EAAAnB,CAAA,GAA2BP,EAASsB,GAAStB,gFAK1C,IAAA2B,EAAAC,KACP,OACEC,EAAA7C,EAAAC,cAAA,OAAK6C,UAAU,SACbD,EAAA7C,EAAAC,cAAA,OAAK6C,UAAU,gBACbD,EAAA7C,EAAAC,cAAA,SACEyB,KAAK,OACLC,MAAOiB,KAAKjC,MAAMK,KAClB+B,SAAUH,KAAKzB,aACf6B,WAAYJ,KAAKf,cAEnBgB,EAAA7C,EAAAC,cAAA,WACG2C,KAAKjC,MAAMI,MAAM0B,IAAI,SAAAzB,GAAI,OACxB6B,EAAA7C,EAAAC,cAAA,OACE6B,IAAKd,EAAKiB,GACVa,UAAU,gBACVG,cAAe,kBACbN,EAAKN,WAAW,CAAEJ,GAAIjB,EAAKiB,GAAIf,MAAOF,EAAKE,SAG5CF,EAAKE,KACJ2B,EAAA7C,EAAAC,cAAA,SACEiD,WAAS,EACTC,OAAQ,kBACNR,EAAKN,WAAW,CAAEJ,GAAIjB,EAAKiB,GAAIf,MAAOF,EAAKE,UAI/C2B,EAAA7C,EAAAC,cAAA,WAAMe,EAAKU,mBAvEX0B,cAkFHC,kBAAIC,EAAJD,CAAYnD","file":"static/js/main.bef2067a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from \"react\";\nimport { hot } from \"react-hot-loader\";\nimport \"./App.scss\";\nimport users from \"./users\";\n// import {appStyle, lainStyle} from \"./component/style/\";\n\nclass App extends Component {\n  state = {\n    nama: \"\",\n    fullName: \"\",\n    shortName: \"\",\n    todos: [],\n    todo: \"\",\n    page: 0,\n    edit: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handlePagination = () => {\n    this.setState(state => ({\n      page: state.page + 1\n    }));\n  };\n\n  handleInput = e => {\n    if (e.key === `Enter` && this.state.todo) {\n      this.setState(state => {\n        return {\n          todos: [\n            ...state.todos,\n            { id: Date.now(), name: state.todo, status: false, edit: false }\n          ],\n          todo: \"\"\n        };\n      });\n    }\n  };\n\n  handleEdit = item => {\n      console.log(item)\n    this.setState(state => ({\n      todos: state.todos.map(todo =>\n        todo.id === item.id ? { ...todo, ...item } : todo\n      )\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"items\">\n        <div className=\"items-column\">\n          <input\n            name=\"todo\"\n            value={this.state.todo}\n            onChange={this.handleChange}\n            onKeyPress={this.handleInput}\n          />\n          <div>\n            {this.state.todos.map(todo => (\n              <div\n                key={todo.id}\n                className=\"items-content\"\n                onDoubleClick={() =>\n                  this.handleEdit({ id: todo.id, edit: !todo.edit })\n                }\n              >\n                {todo.edit ? (\n                  <input\n                    autoFocus\n                    onBlur={() =>\n                      this.handleEdit({ id: todo.id, edit: !todo.edit })\n                    }\n                  />\n                ) : (\n                  <div>{todo.name}</div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default hot(module)(App);\n"],"sourceRoot":""}